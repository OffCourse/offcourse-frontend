;; Analyzed by ClojureScript 1.7.170
{:use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{}, :name offcourse.api.index, :imports nil, :requires {cljs.core.async cljs.core.async, component com.stuartsierra.component, com.stuartsierra.component com.stuartsierra.component, pouchdb offcourse.adapters.pouchdb, offcourse.adapters.pouchdb offcourse.adapters.pouchdb}, :uses {<! cljs.core.async, close! cljs.core.async, >! cljs.core.async, put! cljs.core.async}, :defs {listen {:protocol-inline nil, :meta {:file "/Users/yeehaa/.boot/cache/tmp/Users/yeehaa/Documents/offcourse/20y/-rcsl8f/offcourse/api/index.cljs", :line 7, :column 7, :end-line 7, :end-column 13, :arglists (quote ([{:keys [output-channel input-channel]}]))}, :name offcourse.api.index/listen, :variadic false, :file "/Users/yeehaa/.boot/cache/tmp/Users/yeehaa/Documents/offcourse/20y/-rcsl8f/offcourse/api/index.cljs", :end-column 13, :method-params ([p__28238]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [output-channel input-channel]}]))}, bootstrap {:protocol-inline nil, :meta {:file "/Users/yeehaa/.boot/cache/tmp/Users/yeehaa/Documents/offcourse/20y/-rcsl8f/offcourse/api/index.cljs", :line 14, :column 7, :end-line 14, :end-column 16, :arglists (quote ([{:keys [output-channel input-channel status service], :as api}]))}, :name offcourse.api.index/bootstrap, :variadic false, :file "/Users/yeehaa/.boot/cache/tmp/Users/yeehaa/Documents/offcourse/20y/-rcsl8f/offcourse/api/index.cljs", :end-column 16, :method-params ([p__28289]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [output-channel input-channel status service], :as api}]))}, API {:num-fields 3, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative com.stuartsierra.component/Lifecycle cljs.core/IMap cljs.core/ILookup}, :name offcourse.api.index/API, :file "/Users/yeehaa/.boot/cache/tmp/Users/yeehaa/Documents/offcourse/20y/-rcsl8f/offcourse/api/index.cljs", :end-column 15, :type true, :column 12, :internal-ctor true, :line 22, :record true, :end-line 22, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->API {:protocol-inline nil, :meta {:file "/Users/yeehaa/.boot/cache/tmp/Users/yeehaa/Documents/offcourse/20y/-rcsl8f/offcourse/api/index.cljs", :line 22, :column 12, :end-line 22, :end-column 15, :internal-ctor true, :factory :positional, :arglists (quote ([service output-channel input-channel]))}, :name offcourse.api.index/->API, :variadic false, :file "/Users/yeehaa/.boot/cache/tmp/Users/yeehaa/Documents/offcourse/20y/-rcsl8f/offcourse/api/index.cljs", :end-column 15, :method-params ([service output-channel input-channel]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 22, :end-line 22, :max-fixed-arity 3, :fn-var true, :arglists (quote ([service output-channel input-channel]))}, map->API {:protocol-inline nil, :meta {:file "/Users/yeehaa/.boot/cache/tmp/Users/yeehaa/Documents/offcourse/20y/-rcsl8f/offcourse/api/index.cljs", :line 22, :column 12, :end-line 22, :end-column 15, :internal-ctor true, :factory :map, :arglists (quote ([G__28442]))}, :name offcourse.api.index/map->API, :variadic false, :file "/Users/yeehaa/.boot/cache/tmp/Users/yeehaa/Documents/offcourse/20y/-rcsl8f/offcourse/api/index.cljs", :end-column 15, :method-params ([G__28442]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__28442]))}, new-api {:protocol-inline nil, :meta {:file "/Users/yeehaa/.boot/cache/tmp/Users/yeehaa/Documents/offcourse/20y/-rcsl8f/offcourse/api/index.cljs", :line 30, :column 7, :end-line 30, :end-column 14, :arglists (quote ([]))}, :name offcourse.api.index/new-api, :variadic false, :file "/Users/yeehaa/.boot/cache/tmp/Users/yeehaa/Documents/offcourse/20y/-rcsl8f/offcourse/api/index.cljs", :end-column 14, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:response :input-channel output-channel :service :else input-channel service :recur :listener :status :error :output-channel}, :order [:output-channel :input-channel :recur :else :status :service :response :error :listener service output-channel input-channel]}, :doc nil}