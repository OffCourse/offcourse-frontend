;; Analyzed by ClojureScript 1.7.170
{:use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{}, :name offcourse.api.index, :imports nil, :requires {cljs.core.async cljs.core.async, component com.stuartsierra.component, com.stuartsierra.component com.stuartsierra.component, ba offcourse.protocols.bootstrappable, offcourse.protocols.bootstrappable offcourse.protocols.bootstrappable, qa offcourse.protocols.queryable, offcourse.protocols.queryable offcourse.protocols.queryable, ba-impl offcourse.api.implementations.bootstrappable, offcourse.api.implementations.bootstrappable offcourse.api.implementations.bootstrappable}, :uses {<! cljs.core.async, close! cljs.core.async, Queryable offcourse.protocols.queryable, >! cljs.core.async, Bootstrappable offcourse.protocols.bootstrappable, put! cljs.core.async}, :defs {api {:name offcourse.api.index/api, :source "api", :file "<cljs repl>", :line 1, :column 1, :end-line 1, :end-column 9, :meta {:source "api", :file "NO_SOURCE_FILE", :line 1, :column 6, :end-line 1, :end-column 9}}, API {:num-fields 3, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection offcourse.protocols.queryable/Queryable offcourse.protocols.bootstrappable/Bootstrappable cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative com.stuartsierra.component/Lifecycle cljs.core/IMap cljs.core/ILookup}, :name offcourse.api.index/API, :file "/Users/yeehaa/Documents/offcourse/src/cljs/offcourse/api/index.cljs", :end-column 15, :type true, :column 12, :internal-ctor true, :line 9, :record true, :end-line 9, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, Queryable {:impls (offcourse.api.index/API)}, Bootstrappable {:impls (offcourse.api.index/API)}, ->API {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/offcourse/src/cljs/offcourse/api/index.cljs", :line 9, :column 12, :end-line 9, :end-column 15, :internal-ctor true, :factory :positional, :arglists (quote ([service output-channel input-channel]))}, :name offcourse.api.index/->API, :variadic false, :file "/Users/yeehaa/Documents/offcourse/src/cljs/offcourse/api/index.cljs", :end-column 15, :method-params ([service output-channel input-channel]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 9, :end-line 9, :max-fixed-arity 3, :fn-var true, :arglists (quote ([service output-channel input-channel]))}, map->API {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/offcourse/src/cljs/offcourse/api/index.cljs", :line 9, :column 12, :end-line 9, :end-column 15, :internal-ctor true, :factory :map, :arglists (quote ([G__37103]))}, :name offcourse.api.index/map->API, :variadic false, :file "/Users/yeehaa/Documents/offcourse/src/cljs/offcourse/api/index.cljs", :end-column 15, :method-params ([G__37103]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__37103]))}, new-api {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/offcourse/src/cljs/offcourse/api/index.cljs", :line 21, :column 7, :end-line 21, :end-column 14, :arglists (quote ([]))}, :name offcourse.api.index/new-api, :variadic false, :file "/Users/yeehaa/Documents/offcourse/src/cljs/offcourse/api/index.cljs", :end-column 14, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:input-channel output-channel offcourse.api.index :service offcourse.api.index/api input-channel service :ns :name :file :end-column api :source :column :listener :line :end-line :output-channel :arglists :doc :test}, :order [offcourse.api.index/api :ns :name :file :end-column :source :column :line :end-line :arglists :doc :test offcourse.api.index api :service :output-channel :input-channel :listener service output-channel input-channel]}, :doc nil}