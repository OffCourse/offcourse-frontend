;; Analyzed by ClojureScript 1.7.170
{:use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{}, :name offcourse.api.implementations.bootstrappable, :imports nil, :requires {cljs.core.async cljs.core.async, ba offcourse.protocols.bootstrappable, offcourse.protocols.bootstrappable offcourse.protocols.bootstrappable}, :uses {<! cljs.core.async, >! cljs.core.async, Bootstrappable offcourse.protocols.bootstrappable}, :defs {listen {:protocol-inline nil, :meta {:file "/Users/yeehaa/.boot/cache/tmp/Users/yeehaa/Documents/offcourse/o66/-rcsl8f/offcourse/api/implementations/bootstrappable.cljs", :line 6, :column 7, :end-line 6, :end-column 13, :arglists (quote ([{:keys [output-channel input-channel]}]))}, :name offcourse.api.implementations.bootstrappable/listen, :variadic false, :file "/Users/yeehaa/.boot/cache/tmp/Users/yeehaa/Documents/offcourse/o66/-rcsl8f/offcourse/api/implementations/bootstrappable.cljs", :end-column 13, :method-params ([p__37111]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [output-channel input-channel]}]))}, bootstrap {:protocol-inline nil, :meta {:file "/Users/yeehaa/.boot/cache/tmp/Users/yeehaa/Documents/offcourse/o66/-rcsl8f/offcourse/api/implementations/bootstrappable.cljs", :line 12, :column 7, :end-line 12, :end-column 16, :arglists (quote ([{:keys [output-channel input-channel status service], :as api}]))}, :name offcourse.api.implementations.bootstrappable/bootstrap, :variadic false, :file "/Users/yeehaa/.boot/cache/tmp/Users/yeehaa/Documents/offcourse/o66/-rcsl8f/offcourse/api/implementations/bootstrappable.cljs", :end-column 16, :method-params ([p__37162]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [output-channel input-channel status service], :as api}]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:input-channel :service :else :recur :status :error :output-channel}, :order [:output-channel :input-channel :recur :else :status :service :error]}, :doc nil}